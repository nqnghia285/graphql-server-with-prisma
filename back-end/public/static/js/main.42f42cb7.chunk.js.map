{"version":3,"sources":["logo.svg","apollo_client/mutation/Song/CreateSong.ts","App.tsx","reportWebVitals.ts","apollo_client/index.ts","index.tsx"],"names":["UPLOAD_FILE","gql","App","file","useMutation","errorPolicy","fetchPolicy","onCompleted","data","console","log","upload","className","src","logo","alt","type","onChange","e","files","target","onClick","variables","uploadInput","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpOptions","uri","uploadLink","createUploadLink","batchHttpLink","BatchHttpLink","httpLink","HttpLink","errorLink","onError","graphQLErrors","networkError","forEach","message","locations","path","apolloClient","ApolloClient","credentials","link","from","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById"],"mappings":"6KAAe,MAA0B,iC,wBCO1BA,EANKC,YAAH,uH,iBC4CFC,MAvCf,WACC,IAAIC,EADU,EASGC,YAAYJ,EAAa,CACzCK,YAAa,MACbC,YAAa,WACbC,YAAa,SAACC,GACbC,QAAQC,IAAIF,MAJPG,EATO,oBA4Bd,OACC,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAOC,KAAK,OAAOC,SA7BtB,SAAoBC,GACnB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBhB,EAAOgB,EAAQA,EAAM,GAAK,KAC1BV,QAAQC,IAAIP,MA2BV,wBAAQkB,QAhBX,WACCV,EAAO,CACNW,UAAW,CACVC,YAAa,CACZC,MAAO,YACPrB,KAAMA,OAWP,0BCzBWsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oECJRQ,EAAc,CAAEC,IAAK,YAErBC,E,MAAaC,GAAiBH,GAE9BI,EAAgB,IAAIC,IAAcL,GAElCM,EAAW,IAAIC,IAASP,GAExBQ,EAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACvCD,GAAeA,EAAcE,SAAQ,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAvB,OAAkCxC,QAAQC,IAAR,oCAAyCqC,EAAzC,uBAA+DC,EAA/D,mBAAmFC,OAE1JJ,GAAcpC,QAAQC,IAAR,2BAAgCmC,OAGtCK,EAAe,IAAIC,IAAa,CAC5CC,YAAa,UACbC,KAAMC,YAAK,CAACZ,EAAWN,EAAYE,EAAeE,IAClDe,MAAO,IAAIC,MCdZC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACC,EAAA,EAAD,CAAgBC,OAAQX,EAAxB,SACC,cAAC,EAAD,QAGFY,SAASC,eAAe,SAMzBtC,K","file":"static/js/main.42f42cb7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { gql } from \"@apollo/client\";\r\nconst UPLOAD_FILE = gql`\r\n\tmutation ($uploadInput: UploadInput!) {\r\n\t\tuploadFile(uploadInput: $uploadInput)\r\n\t}\r\n`;\r\n\r\nexport default UPLOAD_FILE;\r\n","import React, { ChangeEvent } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport UPLOAD_FILE from \"./apollo_client/mutation/Song/CreateSong\";\nimport { useMutation } from \"@apollo/client\";\n\nfunction App() {\n\tlet file: File | null;\n\n\tfunction changeFile(e: ChangeEvent<HTMLInputElement>) {\n\t\tconst files = e.target.files;\n\t\tfile = files ? files[0] : null;\n\t\tconsole.log(file);\n\t}\n\n\tconst [upload] = useMutation(UPLOAD_FILE, {\n\t\terrorPolicy: \"all\",\n\t\tfetchPolicy: \"no-cache\",\n\t\tonCompleted: (data) => {\n\t\t\tconsole.log(data);\n\t\t},\n\t});\n\n\tfunction uploadFile() {\n\t\tupload({\n\t\t\tvariables: {\n\t\t\t\tuploadInput: {\n\t\t\t\t\ttitle: \"File name\",\n\t\t\t\t\tfile: file,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<input type=\"file\" onChange={changeFile} />\n\t\t\t\t<button onClick={uploadFile}>Upload</button>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, from, HttpLink, InMemoryCache } from \"@apollo/client\";\r\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\n\r\nconst httpOptions = { uri: \"/graphql\" };\r\n\r\nconst uploadLink = createUploadLink(httpOptions);\r\n\r\nconst batchHttpLink = new BatchHttpLink(httpOptions);\r\n\r\nconst httpLink = new HttpLink(httpOptions);\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n\tif (graphQLErrors) graphQLErrors.forEach(({ message, locations, path }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\r\n\r\n\tif (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nexport const apolloClient = new ApolloClient({\r\n\tcredentials: \"include\",\r\n\tlink: from([errorLink, uploadLink, batchHttpLink, httpLink]),\r\n\tcache: new InMemoryCache(),\r\n});\r\n\r\nexport default apolloClient;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { apolloClient } from \"./apollo_client\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ApolloProvider client={apolloClient}>\n\t\t\t<App />\n\t\t</ApolloProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}